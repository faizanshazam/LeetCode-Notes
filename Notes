This is LeetCode notes per question. You'll find tips and tricks used while solving the question for future reference.
======================================================================================================================

Q 930. Binary Subarrays With Sum
>> Sliding Window can be used. Make sure you reset left and right once right hits end for one particular left.
>> Sliding windows can be thought of prefix sum problem
  >> This is because sum(0:i) - sum(0:i-k) = sum of window (k:i) = sum to be found
  >> Adding map here will help immencely since sum (0:i) - sum to be found = sum (0: i-k) = sum which was already seen.
  >> map[sum]++ will create index of sum then add value to it as well if sum doesn't exists or sumply increement if exists

Q2. Add Two Numbers (LinkedList)
>> if l1 or l2 length differ then no need to break the code and do for left over longer path
>> use ternary operator 
>> make sure you take care of last extra carry which could come even with all nodes are explored 
  so better loop with carry in condition to run extra
>> OR condition in while helps a lot
while( l1 || l2 || carry)
        {
            sum = ((l1)? l1->val : 0) + ((l2) ? l2->val : 0) + carry;   

Q4. Median of Two Sorted Arrays
>> Median of stream of numbers coming using min heap and max heap
  >> ALGORITHM
      >> prioroty_queue<int, vec<int>, greater<int>> minheap;
      >> prioroty_queue<int, vec<int>> maxheap;
      >> first element should go into min heap if max heap is empty
      >> if maxheap is not empty and curr could go inside max heap then push in maxheap
          >> after pushing check if size diff between max and min heap is more than 1 so heapify
          >> remove from max top and push to min heap
     >> else push to min heap and same check of size if if min size > max heap size then heapify
  >> for traversing two vectors of diff size 

         while(i < num1.size() || j < num2.size())
        {
        //pick the element

            if( i< num1.size() && j < num2.size())
                curr = (num1[i] <= num2[j]) ? num1[i++] : num2[j++];
            else if (i >= num1.size())
                curr = num2[j++];
            else
                curr = num1[i++];

Q41. First Missing Positive
>> Best approach is placing the numbers at its correct position by swapping if
    ar[i] <=n and ar[i] >0 
    also ar[i] is not at its correct position
    after swapping do i-- for recheck till it reaches right postion
>> This is because as per question we can assume numbers should be from 1 - n
so if that the case then it will be placed at it correct position ie pos = ar[i] - 1
>> after arranging we can run from 1 to n and see the first number missing.

Q.525. Contiguous Array of equal 0 and 1
>>Contiguous or subarray = can perform prefix sum
>> Idea is faily simple, consider 0 as -1 and 1 as 1 create prefix sum of this.
>> if we encountered same number between 2 indices then it means number changes and
  came back to same value so inbetween number cancelled each other.
>> EDGE CASE: what if no number repeats then there will be case sum become zero somehwere
  so always consider those as well in your max distance logic.

Q Cycle sort : important when questions involvd 1-N numbers, find missing number if one duplicate.
>> Idea is failry simple, make sure current ele a[i] is at it correct index a[a[i]-1]
  >> if a[i] != a[a[i] -1] then swap the number and make sure your a[i] <=n for this to happen for index bounding condition
  >> create a loop from 1 to N and its to be expected that i+1 should be the value at a[i] after swap , the first time number differs the that i+1 is ans
>> or create a mark bit on the same number lets say 20bit and set it
  >> after you did this you can rerun a loop from 1 to N and first time 20th bit is not set is your i+1

Q 432. All O`one Data Structure
>> Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.
  >> Understanding set , pair, map
    #include <utility>  --> pair
    #include <set> --> set
    
    general set<datatype> 
    set with pair set <pair<int, string>>
    general set.insert(1);
    set with pair set.insert({int, string}) // or use make_par(int, string));
    set.erase({int, string}) => This will only erase if exact pair exists in set.

    set.begin() ->first element
    set.rbegin() -> last element
    
    idea is set arranges in orderly manner, default is low to high.
    during get count increases and we can first remove the pair, increase the value and insert back to set.
    This will happen in O(1) time with ordered manner.


Q. Quick Sort Algo
	>> partition point at end, i=start c=end
	>> loop from start to end and swap i and c pointer if a[c] < a[partion]
	>> swap i with parttion and return i as partion point

	>> sort left of partition
	>> sprt right of partition

Q 86. Partition List
Remember not to make Link List complicated. Try to break the list as much as possible.
Its always better to make two different list from original rather trying to make
original as it is. 

Q Sort a stack wothout extra space like array
>> Idea is recursive down while keeping the greater push to down the bottom line of recursion and pop and recurse
once reached the end (emoty stack) push the largest element down.
>> in recursion back you need to make a auxillary stack and push the current top form recursion to it right position

Q1071. Greatest Common Divisor of Strings
>> Need understanding of gcd
  >> GCD : greatest commson divisor
    >> 6,4 => 
        _____  
      4| 6   | 1
        -4
      ----____
        2|4  | 2
          -4
          -----
            0  therefore ans = 2;

      gcd(int a, int b) { if(b==0) return a; temp = b; b = a%b; a = temp; gcd(a,b)}
      doesn't matter if a>b or a<b either way it will convert to a>b case;

  >> After this question is basically asking find a string which could be used to make str1 as well as str2.
      that means xommon string x could be used any multiple times to make str1 as well as str2
      also if thats the case str1 = m * x while str2 = n *x
      so str1 + str2 = (m+n) *x  = str2 + str1 ;
      if thats not the case then there won't be any x which could be common to both this is CHECK 1
      asuming if x does exists, now question is in m*x and n* x what could be max number *x which could be present.
      so for that we can find GCD(m*x, n*x) in a way m*x = length of str1 so is true for str2.
      so subtring of any str1 or str2 (0, gcd(str1 len, str2 len)) will be ans

Q Find the right action
  int gcd (int i)
  {
      if(i==10) return 0;
      cout<<i;
      gcd(i++); ----------> function call with i++ should never be used since i will remain same for next call stack while this stack i will only update
  }                            better to use ++i, compiler will not give error for out of bound

  int gcd (int i)
  {
      if(i==10) return 0;
      cout<<i;
      gcd(++i);--------------> correct form-------------------
  }

Q.605. Can Place Flowers
>> Very simple approach, either add the flower at the position or don't
  >> simple possiblity probelem
  >> edge cases needs to be very careful for i=0 and i = last index
  >> intersting in the sense that if we go with not placing the flower then
    moving to next index will cause us one extra n to manage which will impact anyways
    in the future since all n flowers needs to be placed. There could be possiblity
    that not placing now will result in same soultuon as placing now will but it could always 
    lead to less chances of managing all n while if option of placing n is there then place it.
    BEE GREEDY.

Q 334. Increasing Triplet Subsequence

>>  Here we have to find the condition i < j<k such that a[i] < a[j] < a[k]

idea is simple consider a[i] to be the middle of teh sequence and find any number before it which is low
and any number above it to be high. This could could be achieved by considering SMALLER and GREATER array
make two array of such type. smaller[i]< a[i] < greater[i] if condition is meat then consider.

Q Array of Product
  >> P(i) = P(all except a[i])
Need to condsider zeros and if any number is zero or multipple zero is there.
For zero 1 = all will be zero except zero itself so keep track of all product expect zero
Also check of mistankenly you don't divide by zero

Q Words extraction from sentence
  >> 

Q Switch case
  >> switch case with nobraces inside case will cause evething to come under single siwtch scope
    where same variable declaration couldn't be possibele. Need to a add separeate case scope for declaration of 
    same variable.
    switch (x):
    {
      case 0:
        int b =10;
        break;

        case 1:
        int b =11;
        break;
    }

    This will provide compilation error. To fix it make case under {}

Q. Define your own sizeof
  >> Idea is difference in two pointer address will give size of done under char*

    char* (&x+1) - char*(&x) => size in unit of size of char (1 B), if take other like int* it will give in unit of int (4B)

    #define Sizeof(x)((char*)(&x+1) - (char*)(&x))


Q More about '' empty characters
  >>

Q how to extract digits from left to right
  >> use string's method to_string(int num);

Q Differnce between delete and free
  >> prefer delete over free also set pointer to NULL post delete;
  >> Delete frees the memory and call destructor of the class while free only fress the memory
  There is no Destructor call even after using the statement “return 0”. The reason lies in the difference of
  allocating an object of a class. When we create an object with class_name object_name within a block is created, 
  the object has an automatic storage duration, i.e., it will automatically be destroyed on going out of scope. 
  But when we use new class_name the object has a dynamic storage duration, which means one has to delete it explicitly using delete keyword.

Q HOW TO CHECK BUFFER OVERFLOW?
>> SUM: C = A+B 
  A+B < INT_max
  B < INT_MAX -A // substraction is always safe

  PRODUCT : C =A*b
  A*B <INT_MAX
  B < INT_MAX /A since division so check divisibility test for A !=0 first

  UNIT32 A, B;
  UINT64 c;
  c =A+ B could lead to overflow since both integer are 32bit so better to make one over 32 ie to 64 then add them so result is 64bit
    then check result if > UINT32_MAX 

    limits.h inside where all limits exists
    c = (uint64)A + b
    c < UINT32_MAX

    signed int i = -3
    unisgned size_t = i ===> 2^32 -3


Q difference between typedef enum and enum

  typedef <old varaiable> new vairable;
>> typedef enum state
  {
      ON,
      OFF,
      NONE
  }state;   --> typedef requires two input one for enum and one for typedef if not given compiler gives warning to ignore typedef

  enum microstate
  {
      on,
      off,
      none
  };

  >> with enum you need to tell enum everytime 
    enum microstate mst = on;
  >> with typedef you don't have to say enum 
    state st = ON;

Q.283. Move Zeroes
>> Idea is simple, need to track the index where zero started and sawp every non zero nuber with the z_start index;
>> Careful about chooseing z_start since we need to maintain order of coming numbers better find the first index of zero
a[start] == 0 && z_start == -1 then z_start = start
>> Also when you put elements to a[z_start] make sure a[start] becomes 0 kind of like creating a hole.

Q.739. Daily Temperatures
>> temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have
to wait after the ith day to get a warmer temperature.

Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]

Idea is good one, so we need to track next increasing temperature
anyting related to next increasing could lead to monotonic stack.
since we have dependecy on upcoming day temperature need to travel reverse while keeping stack check.

if(current < st.top) then this could become next greater for some other value so keep in stack and travel backward
if(current > st.top) find the number which is greater than current in stack while poping the values which are less

this requires a distance cheking since answer demand so use pair<int,int> make_pair(int, int) in stack and distance
is top.seond - current_index 

Q.1493. Longest Subarray of 1's After Deleting One Element
>> Idea is as the question says do it
>> push 0s at begining and end of barrier vector to handle edge cases

>> barrier vector represents 0 as -1 (the barrier) and number of 1s . eg 0 3 -1 -1 0 ==>>  1 1 1 0 0 
>> now need to cook up logic to consider removing barriers (-1) and adding prev and next element to the barriers if they are not barrier temselves
else if next to next element is barrier we'll consider previous element as max count and do same if barriers exists in prev to prev elemet considering next elemet
as max count. 
>> for edge cases consider the fact there could be no barriers i.e all 1s
>> there could be all barriers no 1s

Q. SOME FACTS ABOUT VECTORS
>> vector<vector<int>> vec; -> this doesn't have any size yet
	>> for n*m first resize vec to get n rows: vec.resize(n)
	>> then resize all rows to get m column : loop vec[i].resize(m)

Remember without resizing can't access element index

Q. SOME IMPORTANAT FACTS ABOUT MAPS
>> map can accomodate vectors as well
	map<vector<int>, int> --> this will internally check vector comparision

Q SOME FACTS ABOUT STRING
>> Converting number to string, use to_string() rather than char - '0' since that could lead to wrong character/symbol after difference

Q.1318. Minimum Flips to Make a OR b Equal to c
>> Idea is simple, we need to find the difference in bits using xor operation but ctch is you can't count the bits difference in a|b then ^ c
snce question mentioned that we need to operate on a and b to make  a|b eqaul to c.
	Input: a = 2, b = 6, c = 5
	/ 0011 : diff (a|b)^c
	// 0001 : c & diff
	// 0010 : a & diff
	
	// 0011 : (c & diff)^(a&diff) : 2
	//  0010 : b & diff ^ 0 ->1

Q.338. Counting Bits
>> Create array of number of set bits in numbers from 0-n;
	>> Apprach 1: count the nits via loop (n) : n = n&(n-1)
	>> Approach2 : awesome : if num = 5 i.e 0101 so we can say 1 + count(0010) which is 1+ count(num >>1).
	>> make sure number should be positive
	>> if num is odd vec[num] = 1+ vec[num >>1]
	>> else vec[num] = vec[num>>1]
	>> if question says count then you can add all

Q.2390. Removing Stars From a String
>> Question is simple we need to think like a stack, could b solved without it but lets assume stack approach
if current index is * then remove top of stack else push into stack. finally create string using elements left inside stack.
	>>IMPORTANT : str = str+ chararcter will give memory oberflow if str is a big string. to avoid this use
	>>string.push_back(char)
	mkae sure your reverse the stack and perform append into string at last.

Q HOW TO FIND IF TWO NUMBERS ARE OF OPPOSITE SIGN:
>> BEST ANS is  XOR of two such numbers < 0

Q1206. Design Skiplist
>> What is a skip list?
1---------3--------------6-------------9  -> Express lane
|         |              |             |
v         v              v             v
1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 ->8 -> 9  ->> Normal lane

If number of nodes in segemnt tree is N then number of nodes in normal lane is O(sqrt(N))


