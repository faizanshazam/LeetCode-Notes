This is LeetCode notes per question. You'll find tips and tricks used while solving the question for future reference.
======================================================================================================================

Q 930. Binary Subarrays With Sum
>> Sliding Window can be used. Make sure you reset left and right once right hits end for one particular left.
>> Sliding windows can be thought of prefix sum problem
  >> This is because sum(0:i) - sum(0:i-k) = sum of window (k:i) = sum to be found
  >> Adding map here will help immencely since sum (0:i) - sum to be found = sum (0: i-k) = sum which was already seen.
  >> map[sum]++ will create index of sum then add value to it as well if sum doesn't exists or sumply increement if exists

Q2. Add Two Numbers (LinkedList)
>> if l1 or l2 length differ then no need to break the code and do for left over longer path
>> use ternary operator 
>> make sure you take care of last extra carry which could come even with all nodes are explored 
  so better loop with carry in condition to run extra
>> OR condition in while helps a lot
while( l1 || l2 || carry)
        {
            sum = ((l1)? l1->val : 0) + ((l2) ? l2->val : 0) + carry;   

Q4. Median of Two Sorted Arrays
>> Median of stream of numbers coming using min heap and max heap
  >> ALGORITHM
      >> prioroty_queue<int, vec<int>, greater<int>> minheap;
      >> prioroty_queue<int, vec<int>> maxheap;
      >> first element should go into min heap if max heap is empty
      >> if maxheap is not empty and curr could go inside max heap then push in maxheap
          >> after pushing check if size diff between max and min heap is more than 1 so heapify
          >> remove from max top and push to min heap
     >> else push to min heap and same check of size if if min size > max heap size then heapify
  >> for traversing two vectors of diff size 

         while(i < num1.size() || j < num2.size())
        {
        //pick the element

            if( i< num1.size() && j < num2.size())
                curr = (num1[i] <= num2[j]) ? num1[i++] : num2[j++];
            else if (i >= num1.size())
                curr = num2[j++];
            else
                curr = num1[i++];

Q41. First Missing Positive
>> Best approach is placing the numbers at its correct position by swapping if
    ar[i] <=n and ar[i] >0 
    also ar[i] is not at its correct position
    after swapping do i-- for recheck till it reaches right postion
>> This is because as per question we can assume numbers should be from 1 - n
so if that the case then it will be placed at it correct position ie pos = ar[i] - 1
>> after arranging we can run from 1 to n and see the first number missing.

Q.525. Contiguous Array of equal 0 and 1
>>Contiguous or subarray = can perform prefix sum
>> Idea is faily simple, consider 0 as -1 and 1 as 1 create prefix sum of this.
>> if we encountered same number between 2 indices then it means number changes and
  came back to same value so inbetween number cancelled each other.
>> EDGE CASE: what if no number repeats then there will be case sum become zero somehwere
  so always consider those as well in your max distance logic.

Q Cycle sort : important when questions involvd 1-N numbers, find missing number if one duplicate.
>> Idea is failry simple, make sure current ele a[i] is at it correct index a[a[i]-1]
  >> if a[i] != a[a[i] -1] then swap the number and make sure your a[i] <=n for this to happen for index bounding condition
  >> create a loop from 1 to N and its to be expected that i+1 should be the value at a[i] after swap , the first time number differs the that i+1 is ans
>> or create a mark bit on the same number lets say 20bit and set it
  >> after you did this you can rerun a loop from 1 to N and first time 20th bit is not set is your i+1

Q 432. All O`one Data Structure
>> Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.
  >> Understanding set , pair, map
    #include <utility>  --> pair
    #include <set> --> set
    
    general set<datatype> 
    set with pair set <pair<int, string>>
    general set.insert(1);
    set with pair set.insert({int, string}) // or use make_par(int, string));
    set.erase({int, string}) => This will only erase if exact pair exists in set.

    set.begin() ->first element
    set.rbegin() -> last element
    
    idea is set arranges in orderly manner, default is low to high.
    during get count increases and we can first remove the pair, increase the value and insert back to set.
    This will happen in O(1) time with ordered manner.


Q1206. Design Skiplist
>> What is a skip list?
1---------3--------------6-------------9  -> Express lane
|         |              |             |
v         v              v             v
1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 ->8 -> 9  ->> Normal lane

If number of nodes in segemnt tree is N then number of nodes in normal lane is O(sqrt(N))
